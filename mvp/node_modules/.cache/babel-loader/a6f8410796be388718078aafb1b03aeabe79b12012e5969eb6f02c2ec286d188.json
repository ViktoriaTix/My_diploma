{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\OTD\\\\mvp\\\\src\\\\components\\\\Graf.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst EventsChart = () => {\n  _s();\n  const [homeId, setHomeId] = useState(null);\n  const [data, setData] = useState([]);\n  const canvasRef = useRef(null);\n  const chartHeight = 100;\n  const barWidth = 30;\n\n  // Функция для получения событий из API\n  const fetchData = async homeId => {\n    try {\n      const url = homeId ? `http://localhost:8000/events?id_home=${homeId}` : \"http://localhost:8000/events\";\n      const response = await fetch(url);\n      if (!response.ok) {\n        throw new Error(`Ошибка HTTP: ${response.status}`);\n      }\n      const events = await response.json();\n      setData(events);\n    } catch (error) {\n      console.error(\"Ошибка при загрузке данных:\", error);\n    }\n  };\n\n  // Функция для отрисовки графика\n  const renderChart = data => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext(\"2d\");\n    if (data.length === 0) return;\n    const maxWidth = 1000;\n    const canvasWidth = Math.min(data.length * barWidth, maxWidth);\n    canvas.width = canvasWidth;\n    canvas.height = chartHeight + 80;\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    const gradient = ctx.createLinearGradient(0, 0, canvas.width, 0);\n    gradient.addColorStop(0, \"#D9A6F5\");\n    gradient.addColorStop(1, \"#FFFB7E\");\n    const colors = {\n      1: \"#D9A6F5\",\n      2: \"#FFFB7E\",\n      3: \"#4A90E2\",\n      0: \"#F7A8B8\"\n    };\n    data.forEach((event, index) => {\n      const x = index * barWidth;\n      const color = colors[event.event_type_id] || \"#F7A8B8\";\n\n      // Отрисовка баров\n      ctx.fillStyle = gradient;\n      ctx.fillRect(x, 0, barWidth, chartHeight);\n      ctx.fillStyle = color;\n      ctx.fillRect(x, 0, barWidth, chartHeight);\n\n      // Граница баров\n      ctx.strokeStyle = \"white\";\n      ctx.lineWidth = 1;\n      ctx.strokeRect(x, 0, barWidth, chartHeight);\n\n      // Отрисовка времени событий\n      if (index % 5 === 0) {\n        ctx.fillStyle = \"black\";\n        ctx.font = \"12px Arial\";\n        ctx.textAlign = \"center\";\n        const time = new Date(event.created_at).toLocaleTimeString();\n        ctx.fillText(time, x + barWidth / 2, chartHeight + 20);\n      }\n    });\n\n    // Легенда\n    ctx.fillStyle = \"black\";\n    ctx.font = \"14px Arial\";\n    ctx.textAlign = \"left\";\n    ctx.fillText(\"Цвета событий:\", 10, canvas.height - 30);\n    ctx.fillStyle = \"#070000\";\n    ctx.fillText(\"Сиреневый: Активные действия\", 120, canvas.height - 15);\n    ctx.fillStyle = \"#070000FF\";\n    ctx.fillText(\"Желтый: Спокойствие\", 400, canvas.height - 15);\n    ctx.fillStyle = \"#070000FF\";\n    ctx.fillText(\"Синий: Туалет\", 600, canvas.height - 15);\n    ctx.fillStyle = \"#070000FF\";\n    ctx.fillText(\"Розовый: Еда\", 800, canvas.height - 15);\n  };\n\n  // Хук для загрузки данных при изменении homeId\n  useEffect(() => {\n    if (homeId) {\n      fetchData(homeId);\n    }\n  }, [homeId]);\n\n  // Хук для перерисовки графика при изменении данных\n  useEffect(() => {\n    if (data.length > 0) {\n      renderChart(data);\n    }\n  }, [data]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      backgroundColor: \"#f4f4f4\",\n      padding: \"20px\",\n      borderRadius: \"10px\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      style: {\n        textAlign: \"center\"\n      },\n      children: \"\\u0412\\u044B\\u0431\\u0435\\u0440\\u0438\\u0442\\u0435 \\u043A\\u043E\\u043C\\u043D\\u0430\\u0442\\u0443 \\u0434\\u043B\\u044F \\u043E\\u0442\\u043E\\u0431\\u0440\\u0430\\u0436\\u0435\\u043D\\u0438\\u044F \\u0433\\u0440\\u0430\\u0444\\u0438\\u043A\\u0430\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        textAlign: \"center\",\n        marginBottom: \"20px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setHomeId(101),\n        children: \"BedRoom\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setHomeId(102),\n        children: \"Kitchen\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 13\n    }, this), homeId && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        overflowX: \"auto\",\n        marginTop: \"30px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        style: {\n          textAlign: \"center\"\n        },\n        children: \"\\u041F\\u043E\\u043B\\u043E\\u0441\\u043E\\u0432\\u043E\\u0439 \\u0433\\u0440\\u0430\\u0444\\u0438\\u043A \\u0441\\u043E\\u0431\\u044B\\u0442\\u0438\\u0439\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n        ref: canvasRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 109,\n    columnNumber: 9\n  }, this);\n};\n_s(EventsChart, \"h4ssUZdB0xJBNaZ+b1k9vc23XPg=\");\n_c = EventsChart;\nexport default EventsChart;\nvar _c;\n$RefreshReg$(_c, \"EventsChart\");","map":{"version":3,"names":["React","useEffect","useRef","useState","jsxDEV","_jsxDEV","EventsChart","_s","homeId","setHomeId","data","setData","canvasRef","chartHeight","barWidth","fetchData","url","response","fetch","ok","Error","status","events","json","error","console","renderChart","canvas","current","ctx","getContext","length","maxWidth","canvasWidth","Math","min","width","height","clearRect","gradient","createLinearGradient","addColorStop","colors","forEach","event","index","x","color","event_type_id","fillStyle","fillRect","strokeStyle","lineWidth","strokeRect","font","textAlign","time","Date","created_at","toLocaleTimeString","fillText","style","backgroundColor","padding","borderRadius","children","fileName","_jsxFileName","lineNumber","columnNumber","marginBottom","onClick","overflowX","marginTop","ref","_c","$RefreshReg$"],"sources":["C:/Users/User/OTD/mvp/src/components/Graf.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\r\n\r\n\r\nconst EventsChart = () => {\r\n    const [homeId, setHomeId] = useState(null);\r\n    const [data, setData] = useState([]);\r\n    const canvasRef = useRef(null);\r\n    const chartHeight = 100;\r\n    const barWidth = 30;\r\n\r\n    // Функция для получения событий из API\r\n    const fetchData = async (homeId) => {\r\n        try {\r\n            const url = homeId ? `http://localhost:8000/events?id_home=${homeId}` : \"http://localhost:8000/events\";\r\n            const response = await fetch(url);\r\n\r\n            if (!response.ok) {\r\n                throw new Error(`Ошибка HTTP: ${response.status}`);\r\n            }\r\n\r\n            const events = await response.json();\r\n            setData(events);\r\n        } catch (error) {\r\n            console.error(\"Ошибка при загрузке данных:\", error);\r\n        }\r\n    };\r\n\r\n    // Функция для отрисовки графика\r\n    const renderChart = (data) => {\r\n        const canvas = canvasRef.current;\r\n        const ctx = canvas.getContext(\"2d\");\r\n\r\n        if (data.length === 0) return;\r\n\r\n        const maxWidth = 1000;\r\n        const canvasWidth = Math.min(data.length * barWidth, maxWidth);\r\n        canvas.width = canvasWidth;\r\n        canvas.height = chartHeight + 80;\r\n\r\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n\r\n        const gradient = ctx.createLinearGradient(0, 0, canvas.width, 0);\r\n        gradient.addColorStop(0, \"#D9A6F5\");\r\n        gradient.addColorStop(1, \"#FFFB7E\");\r\n\r\n        const colors = {\r\n            1: \"#D9A6F5\",\r\n            2: \"#FFFB7E\",\r\n            3: \"#4A90E2\",\r\n            0: \"#F7A8B8\",\r\n        };\r\n\r\n        data.forEach((event, index) => {\r\n            const x = index * barWidth;\r\n            const color = colors[event.event_type_id] || \"#F7A8B8\";\r\n\r\n            // Отрисовка баров\r\n            ctx.fillStyle = gradient;\r\n            ctx.fillRect(x, 0, barWidth, chartHeight);\r\n\r\n            ctx.fillStyle = color;\r\n            ctx.fillRect(x, 0, barWidth, chartHeight);\r\n\r\n            // Граница баров\r\n            ctx.strokeStyle = \"white\";\r\n            ctx.lineWidth = 1;\r\n            ctx.strokeRect(x, 0, barWidth, chartHeight);\r\n\r\n            // Отрисовка времени событий\r\n            if (index % 5 === 0) {\r\n                ctx.fillStyle = \"black\";\r\n                ctx.font = \"12px Arial\";\r\n                ctx.textAlign = \"center\";\r\n                const time = new Date(event.created_at).toLocaleTimeString();\r\n                ctx.fillText(time, x + barWidth / 2, chartHeight + 20);\r\n            }\r\n        });\r\n\r\n        // Легенда\r\n        ctx.fillStyle = \"black\";\r\n        ctx.font = \"14px Arial\";\r\n        ctx.textAlign = \"left\";\r\n        ctx.fillText(\"Цвета событий:\", 10, canvas.height - 30);\r\n        ctx.fillStyle = \"#070000\";\r\n        ctx.fillText(\"Сиреневый: Активные действия\", 120, canvas.height - 15);\r\n        ctx.fillStyle = \"#070000FF\";\r\n        ctx.fillText(\"Желтый: Спокойствие\", 400, canvas.height - 15);\r\n        ctx.fillStyle = \"#070000FF\";\r\n        ctx.fillText(\"Синий: Туалет\", 600, canvas.height - 15);\r\n        ctx.fillStyle = \"#070000FF\";\r\n        ctx.fillText(\"Розовый: Еда\", 800, canvas.height - 15);\r\n    };\r\n\r\n    // Хук для загрузки данных при изменении homeId\r\n    useEffect(() => {\r\n        if (homeId) {\r\n            fetchData(homeId);\r\n        }\r\n    }, [homeId]);\r\n\r\n    // Хук для перерисовки графика при изменении данных\r\n    useEffect(() => {\r\n        if (data.length > 0) {\r\n            renderChart(data);\r\n        }\r\n    }, [data]);\r\n\r\n    return (\r\n        <div style={{ backgroundColor: \"#f4f4f4\", padding: \"20px\", borderRadius: \"10px\" }}>\r\n            <h2 style={{ textAlign: \"center\" }}>Выберите комнату для отображения графика</h2>\r\n\r\n            <div style={{ textAlign: \"center\", marginBottom: \"20px\" }}>\r\n                <button onClick={() => setHomeId(101)}>BedRoom</button>\r\n                <button onClick={() => setHomeId(102)}>Kitchen</button>\r\n            </div>\r\n\r\n            {homeId && (\r\n                <div style={{ overflowX: \"auto\", marginTop: \"30px\" }}>\r\n                    <h3 style={{ textAlign: \"center\" }}>Полосовой график событий</h3>\r\n                    <canvas ref={canvasRef}></canvas>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default EventsChart;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}