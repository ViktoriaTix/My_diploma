{"ast":null,"code":"import YAML, { JSON_SCHEMA } from 'js-yaml';\nimport { from, ParseResultElement } from '@swagger-api/apidom-core';\nimport { ParserError, Parser } from '@swagger-api/apidom-reference/configuration/empty';\nclass YAMLParser extends Parser {\n  constructor(options = {}) {\n    super({\n      name: 'yaml-1-2-swagger-client',\n      mediaTypes: ['text/yaml', 'application/yaml'],\n      ...options\n    });\n  }\n  async canParse(file) {\n    const hasSupportedFileExtension = this.fileExtensions.length === 0 ? true : this.fileExtensions.includes(file.extension);\n    const hasSupportedMediaType = this.mediaTypes.includes(file.mediaType);\n    if (!hasSupportedFileExtension) return false;\n    if (hasSupportedMediaType) return true;\n    if (!hasSupportedMediaType) {\n      try {\n        YAML.load(file.toString(), {\n          schema: JSON_SCHEMA\n        });\n        return true;\n      } catch (error) {\n        return false;\n      }\n    }\n    return false;\n  }\n  async parse(file) {\n    if (this.sourceMap) {\n      throw new ParserError(\"yaml-1-2-swagger-client parser plugin doesn't support sourceMaps option\");\n    }\n    const parseResultElement = new ParseResultElement();\n    const source = file.toString();\n    try {\n      const pojo = YAML.load(source, {\n        schema: JSON_SCHEMA\n      });\n      if (this.allowEmpty && typeof pojo === 'undefined') {\n        return parseResultElement;\n      }\n      const element = from(pojo);\n      element.classes.push('result');\n      parseResultElement.push(element);\n      return parseResultElement;\n    } catch (error) {\n      throw new ParserError(`Error parsing \"${file.uri}\"`, {\n        cause: error\n      });\n    }\n  }\n}\nexport default YAMLParser;","map":{"version":3,"names":["YAML","JSON_SCHEMA","from","ParseResultElement","ParserError","Parser","YAMLParser","constructor","options","name","mediaTypes","canParse","file","hasSupportedFileExtension","fileExtensions","length","includes","extension","hasSupportedMediaType","mediaType","load","toString","schema","error","parse","sourceMap","parseResultElement","source","pojo","allowEmpty","element","classes","push","uri","cause"],"sources":["D:/Vasya/Documents/STUDYING/NSU/4_year/ТехДок/Проект/anakot/node_modules/swagger-client/es/resolver/apidom/reference/parse/parsers/yaml-1-2/index.js"],"sourcesContent":["import YAML, { JSON_SCHEMA } from 'js-yaml';\nimport { from, ParseResultElement } from '@swagger-api/apidom-core';\nimport { ParserError, Parser } from '@swagger-api/apidom-reference/configuration/empty';\nclass YAMLParser extends Parser {\n  constructor(options = {}) {\n    super({\n      name: 'yaml-1-2-swagger-client',\n      mediaTypes: ['text/yaml', 'application/yaml'],\n      ...options\n    });\n  }\n  async canParse(file) {\n    const hasSupportedFileExtension = this.fileExtensions.length === 0 ? true : this.fileExtensions.includes(file.extension);\n    const hasSupportedMediaType = this.mediaTypes.includes(file.mediaType);\n    if (!hasSupportedFileExtension) return false;\n    if (hasSupportedMediaType) return true;\n    if (!hasSupportedMediaType) {\n      try {\n        YAML.load(file.toString(), {\n          schema: JSON_SCHEMA\n        });\n        return true;\n      } catch (error) {\n        return false;\n      }\n    }\n    return false;\n  }\n  async parse(file) {\n    if (this.sourceMap) {\n      throw new ParserError(\"yaml-1-2-swagger-client parser plugin doesn't support sourceMaps option\");\n    }\n    const parseResultElement = new ParseResultElement();\n    const source = file.toString();\n    try {\n      const pojo = YAML.load(source, {\n        schema: JSON_SCHEMA\n      });\n      if (this.allowEmpty && typeof pojo === 'undefined') {\n        return parseResultElement;\n      }\n      const element = from(pojo);\n      element.classes.push('result');\n      parseResultElement.push(element);\n      return parseResultElement;\n    } catch (error) {\n      throw new ParserError(`Error parsing \"${file.uri}\"`, {\n        cause: error\n      });\n    }\n  }\n}\nexport default YAMLParser;"],"mappings":"AAAA,OAAOA,IAAI,IAAIC,WAAW,QAAQ,SAAS;AAC3C,SAASC,IAAI,EAAEC,kBAAkB,QAAQ,0BAA0B;AACnE,SAASC,WAAW,EAAEC,MAAM,QAAQ,mDAAmD;AACvF,MAAMC,UAAU,SAASD,MAAM,CAAC;EAC9BE,WAAWA,CAACC,OAAO,GAAG,CAAC,CAAC,EAAE;IACxB,KAAK,CAAC;MACJC,IAAI,EAAE,yBAAyB;MAC/BC,UAAU,EAAE,CAAC,WAAW,EAAE,kBAAkB,CAAC;MAC7C,GAAGF;IACL,CAAC,CAAC;EACJ;EACA,MAAMG,QAAQA,CAACC,IAAI,EAAE;IACnB,MAAMC,yBAAyB,GAAG,IAAI,CAACC,cAAc,CAACC,MAAM,KAAK,CAAC,GAAG,IAAI,GAAG,IAAI,CAACD,cAAc,CAACE,QAAQ,CAACJ,IAAI,CAACK,SAAS,CAAC;IACxH,MAAMC,qBAAqB,GAAG,IAAI,CAACR,UAAU,CAACM,QAAQ,CAACJ,IAAI,CAACO,SAAS,CAAC;IACtE,IAAI,CAACN,yBAAyB,EAAE,OAAO,KAAK;IAC5C,IAAIK,qBAAqB,EAAE,OAAO,IAAI;IACtC,IAAI,CAACA,qBAAqB,EAAE;MAC1B,IAAI;QACFlB,IAAI,CAACoB,IAAI,CAACR,IAAI,CAACS,QAAQ,CAAC,CAAC,EAAE;UACzBC,MAAM,EAAErB;QACV,CAAC,CAAC;QACF,OAAO,IAAI;MACb,CAAC,CAAC,OAAOsB,KAAK,EAAE;QACd,OAAO,KAAK;MACd;IACF;IACA,OAAO,KAAK;EACd;EACA,MAAMC,KAAKA,CAACZ,IAAI,EAAE;IAChB,IAAI,IAAI,CAACa,SAAS,EAAE;MAClB,MAAM,IAAIrB,WAAW,CAAC,yEAAyE,CAAC;IAClG;IACA,MAAMsB,kBAAkB,GAAG,IAAIvB,kBAAkB,CAAC,CAAC;IACnD,MAAMwB,MAAM,GAAGf,IAAI,CAACS,QAAQ,CAAC,CAAC;IAC9B,IAAI;MACF,MAAMO,IAAI,GAAG5B,IAAI,CAACoB,IAAI,CAACO,MAAM,EAAE;QAC7BL,MAAM,EAAErB;MACV,CAAC,CAAC;MACF,IAAI,IAAI,CAAC4B,UAAU,IAAI,OAAOD,IAAI,KAAK,WAAW,EAAE;QAClD,OAAOF,kBAAkB;MAC3B;MACA,MAAMI,OAAO,GAAG5B,IAAI,CAAC0B,IAAI,CAAC;MAC1BE,OAAO,CAACC,OAAO,CAACC,IAAI,CAAC,QAAQ,CAAC;MAC9BN,kBAAkB,CAACM,IAAI,CAACF,OAAO,CAAC;MAChC,OAAOJ,kBAAkB;IAC3B,CAAC,CAAC,OAAOH,KAAK,EAAE;MACd,MAAM,IAAInB,WAAW,CAAC,kBAAkBQ,IAAI,CAACqB,GAAG,GAAG,EAAE;QACnDC,KAAK,EAAEX;MACT,CAAC,CAAC;IACJ;EACF;AACF;AACA,eAAejB,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}