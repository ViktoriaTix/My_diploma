{"ast":null,"code":"import { curryN, bind } from 'ramda';\nimport resolveP from './resolveP.js';\nimport rejectP from './rejectP.js';\n\n/**\n * Takes a generator function and returns an async function.\n * The async function returned is a curried function whose arity matches that of the generator function.\n *\n * Note: This function is handy for environments that does support generators but doesn't support async/await.\n *\n * @func async\n * @memberOf RA\n * @since {@link https://char0n.github.io/ramda-adjunct/2.16.0|v2.16.0}\n * @category Function\n * @sig Promise c => (a, b, ...) -> a -> b -> ... -> c\n * @param {Function} generatorFn The generator function\n * @return {Function} Curried async function\n * @see {@link https://www.promisejs.org/generators/}\n * @example\n *\n * const asyncFn = RA.async(function* generator(val1, val2) {\n *   const a = yield Promise.resolve(val1);\n *   const b = yield Promise.resolve(val2);\n *\n *   return a + b;\n * });\n *\n * asyncFn(1, 2); //=> Promise(3)\n *\n */\nvar async = curryN(1, function (generatorFn) {\n  function asyncWrapper() {\n    var iterator = bind(generatorFn, this).apply(void 0, arguments);\n    var _handle = function handle(result) {\n      var resolved = resolveP(result.value);\n      return result.done ? resolved : resolved.then(function (value) {\n        return _handle(iterator.next(value));\n      }, function (error) {\n        return _handle(iterator[\"throw\"](error));\n      });\n    };\n    try {\n      return _handle(iterator.next());\n    } catch (error) {\n      return rejectP(error);\n    }\n  }\n  if (generatorFn.length > 0) {\n    return curryN(generatorFn.length, asyncWrapper);\n  }\n  return asyncWrapper;\n});\nexport default async;","map":{"version":3,"names":["curryN","bind","resolveP","rejectP","async","generatorFn","asyncWrapper","iterator","apply","arguments","_handle","handle","result","resolved","value","done","then","next","error","length"],"sources":["D:/Vasya/Documents/STUDYING/NSU/4_year/ТехДок/Проект/anakot/node_modules/ramda-adjunct/es/async.js"],"sourcesContent":["import { curryN, bind } from 'ramda';\nimport resolveP from './resolveP.js';\nimport rejectP from './rejectP.js';\n\n/**\n * Takes a generator function and returns an async function.\n * The async function returned is a curried function whose arity matches that of the generator function.\n *\n * Note: This function is handy for environments that does support generators but doesn't support async/await.\n *\n * @func async\n * @memberOf RA\n * @since {@link https://char0n.github.io/ramda-adjunct/2.16.0|v2.16.0}\n * @category Function\n * @sig Promise c => (a, b, ...) -> a -> b -> ... -> c\n * @param {Function} generatorFn The generator function\n * @return {Function} Curried async function\n * @see {@link https://www.promisejs.org/generators/}\n * @example\n *\n * const asyncFn = RA.async(function* generator(val1, val2) {\n *   const a = yield Promise.resolve(val1);\n *   const b = yield Promise.resolve(val2);\n *\n *   return a + b;\n * });\n *\n * asyncFn(1, 2); //=> Promise(3)\n *\n */\nvar async = curryN(1, function (generatorFn) {\n  function asyncWrapper() {\n    var iterator = bind(generatorFn, this).apply(void 0, arguments);\n    var _handle = function handle(result) {\n      var resolved = resolveP(result.value);\n      return result.done ? resolved : resolved.then(function (value) {\n        return _handle(iterator.next(value));\n      }, function (error) {\n        return _handle(iterator[\"throw\"](error));\n      });\n    };\n    try {\n      return _handle(iterator.next());\n    } catch (error) {\n      return rejectP(error);\n    }\n  }\n  if (generatorFn.length > 0) {\n    return curryN(generatorFn.length, asyncWrapper);\n  }\n  return asyncWrapper;\n});\nexport default async;"],"mappings":"AAAA,SAASA,MAAM,EAAEC,IAAI,QAAQ,OAAO;AACpC,OAAOC,QAAQ,MAAM,eAAe;AACpC,OAAOC,OAAO,MAAM,cAAc;;AAElC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,KAAK,GAAGJ,MAAM,CAAC,CAAC,EAAE,UAAUK,WAAW,EAAE;EAC3C,SAASC,YAAYA,CAAA,EAAG;IACtB,IAAIC,QAAQ,GAAGN,IAAI,CAACI,WAAW,EAAE,IAAI,CAAC,CAACG,KAAK,CAAC,KAAK,CAAC,EAAEC,SAAS,CAAC;IAC/D,IAAIC,OAAO,GAAG,SAASC,MAAMA,CAACC,MAAM,EAAE;MACpC,IAAIC,QAAQ,GAAGX,QAAQ,CAACU,MAAM,CAACE,KAAK,CAAC;MACrC,OAAOF,MAAM,CAACG,IAAI,GAAGF,QAAQ,GAAGA,QAAQ,CAACG,IAAI,CAAC,UAAUF,KAAK,EAAE;QAC7D,OAAOJ,OAAO,CAACH,QAAQ,CAACU,IAAI,CAACH,KAAK,CAAC,CAAC;MACtC,CAAC,EAAE,UAAUI,KAAK,EAAE;QAClB,OAAOR,OAAO,CAACH,QAAQ,CAAC,OAAO,CAAC,CAACW,KAAK,CAAC,CAAC;MAC1C,CAAC,CAAC;IACJ,CAAC;IACD,IAAI;MACF,OAAOR,OAAO,CAACH,QAAQ,CAACU,IAAI,CAAC,CAAC,CAAC;IACjC,CAAC,CAAC,OAAOC,KAAK,EAAE;MACd,OAAOf,OAAO,CAACe,KAAK,CAAC;IACvB;EACF;EACA,IAAIb,WAAW,CAACc,MAAM,GAAG,CAAC,EAAE;IAC1B,OAAOnB,MAAM,CAACK,WAAW,CAACc,MAAM,EAAEb,YAAY,CAAC;EACjD;EACA,OAAOA,YAAY;AACrB,CAAC,CAAC;AACF,eAAeF,KAAK","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}