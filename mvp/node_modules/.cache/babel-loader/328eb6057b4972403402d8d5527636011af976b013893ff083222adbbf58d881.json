{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\OTD\\\\mvp\\\\src\\\\components\\\\EventTable.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst EventsPage = () => {\n  _s();\n  const [data, setData] = useState([]);\n  useEffect(() => {\n    const fetchEvents = async () => {\n      try {\n        const response = await axios.get('http://localhost:8000/events');\n        const events = response.data;\n\n        // Группируем данные по уникальному имени\n        const groupedData = events.reduce((acc, event) => {\n          const {\n            name,\n            event_type_id,\n            created_at\n          } = event;\n          if (!acc[name]) {\n            acc[name] = {\n              name,\n              events: {\n                1: 0,\n                2: 0,\n                3: 0,\n                4: 0\n              }\n            }; // Инициализируем события для каждого имени\n          }\n\n          // Считаем общее время для каждого типа событий (в миллисекундах)\n          acc[name].events[event_type_id] += new Date(created_at).getTime();\n          return acc;\n        }, {});\n\n        // Обработка данных: перевод времени в часы\n        const processedData = Object.values(groupedData).map(group => {\n          const eventDurationsInHours = {};\n          Object.keys(group.events).forEach(eventTypeId => {\n            const totalMilliseconds = group.events[eventTypeId];\n            const totalHours = totalMilliseconds / (1000 * 60 * 60); // Переводим миллисекунды в часы\n            eventDurationsInHours[eventTypeId] = totalHours.toFixed(2); // Округляем до 2 знаков\n          });\n          return {\n            ...group,\n            events: eventDurationsInHours\n          };\n        });\n        setData(processedData);\n      } catch (error) {\n        console.error(\"Ошибка при получении событий:\", error);\n      }\n    };\n    fetchEvents();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"\\u0421\\u043E\\u0431\\u044B\\u0442\\u0438\\u044F \\u043F\\u043E \\u043F\\u0438\\u0442\\u043E\\u043C\\u0446\\u0430\\u043C\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }, this), data.map((group, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: group.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"\\u0422\\u0438\\u043F \\u0441\\u043E\\u0431\\u044B\\u0442\\u0438\\u044F\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 54,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"\\u0421\\u0443\\u043C\\u043C\\u0430 \\u0432\\u0440\\u0435\\u043C\\u0435\\u043D\\u0438 (\\u0447\\u0430\\u0441\\u044B)\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 55,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: Object.entries(group.events).map(([eventTypeId, totalHours]) => /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: eventTypeId\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 61,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: totalHours\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 62,\n              columnNumber: 37\n            }, this)]\n          }, eventTypeId, true, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 33\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 21\n      }, this)]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 17\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 9\n  }, this);\n};\n_s(EventsPage, \"IEMTtLVFIuToo7X/raQbJAxzNQU=\");\n_c = EventsPage;\nexport default EventsPage;\nvar _c;\n$RefreshReg$(_c, \"EventsPage\");","map":{"version":3,"names":["React","useEffect","useState","axios","jsxDEV","_jsxDEV","EventsPage","_s","data","setData","fetchEvents","response","get","events","groupedData","reduce","acc","event","name","event_type_id","created_at","Date","getTime","processedData","Object","values","map","group","eventDurationsInHours","keys","forEach","eventTypeId","totalMilliseconds","totalHours","toFixed","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","index","entries","_c","$RefreshReg$"],"sources":["C:/Users/User/OTD/mvp/src/components/EventTable.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport axios from 'axios';\n\nconst EventsPage = () => {\n    const [data, setData] = useState([]);\n\n    useEffect(() => {\n        const fetchEvents = async () => {\n            try {\n                const response = await axios.get('http://localhost:8000/events');\n                const events = response.data;\n\n                // Группируем данные по уникальному имени\n                const groupedData = events.reduce((acc, event) => {\n                    const { name, event_type_id, created_at } = event;\n\n                    if (!acc[name]) {\n                        acc[name] = { name, events: { 1: 0, 2: 0, 3: 0, 4: 0 } }; // Инициализируем события для каждого имени\n                    }\n\n                    // Считаем общее время для каждого типа событий (в миллисекундах)\n                    acc[name].events[event_type_id] += new Date(created_at).getTime();\n                    return acc;\n                }, {});\n\n                // Обработка данных: перевод времени в часы\n                const processedData = Object.values(groupedData).map((group) => {\n                    const eventDurationsInHours = {};\n                    Object.keys(group.events).forEach((eventTypeId) => {\n                        const totalMilliseconds = group.events[eventTypeId];\n                        const totalHours = totalMilliseconds / (1000 * 60 * 60); // Переводим миллисекунды в часы\n                        eventDurationsInHours[eventTypeId] = totalHours.toFixed(2); // Округляем до 2 знаков\n                    });\n                    return { ...group, events: eventDurationsInHours };\n                });\n\n                setData(processedData);\n            } catch (error) {\n                console.error(\"Ошибка при получении событий:\", error);\n            }\n        };\n        fetchEvents();\n    }, []);\n\n    return (\n        <div>\n            <h1>События по питомцам</h1>\n            {data.map((group, index) => (\n                <div key={index}>\n                    <h2>{group.name}</h2>\n                    <table>\n                        <thead>\n                            <tr>\n                                <th>Тип события</th>\n                                <th>Сумма времени (часы)</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {Object.entries(group.events).map(([eventTypeId, totalHours]) => (\n                                <tr key={eventTypeId}>\n                                    <td>{eventTypeId}</td>\n                                    <td>{totalHours}</td>\n                                </tr>\n                            ))}\n                        </tbody>\n                    </table>\n                </div>\n            ))}\n        </div>\n    );\n};\n\nexport default EventsPage;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}