{"ast":null,"code":"/* eslint-disable camelcase */\nimport { dispatchRefractorPlugins, isObjectElement, toValue } from '@swagger-api/apidom-core';\nimport { refractorPluginNormalizeOperationIds, refractorPluginNormalizeParameters, refractorPluginNormalizeSecurityRequirements, refractorPluginNormalizeParameterExamples, refractorPluginNormalizeHeaderExamples, createToolbox, keyMap, getNodeType, OpenApi3_1Element } from '@swagger-api/apidom-ns-openapi-3-1';\nimport opId from '../../../helpers/op-id.js';\nimport resolveOpenAPI31Strategy from './resolve.js';\nconst normalize = element => {\n  if (!isObjectElement(element)) return element;\n  const plugins = [refractorPluginNormalizeOperationIds({\n    operationIdNormalizer: (operationId, path, method) => opId({\n      operationId\n    }, path, method, {\n      v2OperationIdCompatibilityMode: false\n    })\n  }), refractorPluginNormalizeParameters(), refractorPluginNormalizeSecurityRequirements(), refractorPluginNormalizeParameterExamples(), refractorPluginNormalizeHeaderExamples()];\n  const normalized = dispatchRefractorPlugins(element, plugins, {\n    toolboxCreator: createToolbox,\n    visitorOptions: {\n      keyMap,\n      nodeTypeGetter: getNodeType\n    }\n  });\n  return normalized;\n};\n\n/**\n * This adapter allow to perform normalization on Plain Old JavaScript Objects.\n * The function adapts the `normalize` function interface and is able to accept\n * Plain Old JavaScript Objects and returns Plain Old JavaScript Objects.\n */\nexport const pojoAdapter = normalizeFn => spec => {\n  const openApiElement = OpenApi3_1Element.refract(spec);\n  openApiElement.classes.push('result');\n  const normalized = normalizeFn(openApiElement);\n  const value = toValue(normalized);\n\n  /**\n   * We're setting the cache here to avoid repeated refracting\n   * in `openapi-3-1-apidom` strategy resolve method.\n   */\n  resolveOpenAPI31Strategy.cache.set(value, normalized);\n  return toValue(normalized);\n};\nexport default normalize;\n/* eslint-enable camelcase */","map":{"version":3,"names":["dispatchRefractorPlugins","isObjectElement","toValue","refractorPluginNormalizeOperationIds","refractorPluginNormalizeParameters","refractorPluginNormalizeSecurityRequirements","refractorPluginNormalizeParameterExamples","refractorPluginNormalizeHeaderExamples","createToolbox","keyMap","getNodeType","OpenApi3_1Element","opId","resolveOpenAPI31Strategy","normalize","element","plugins","operationIdNormalizer","operationId","path","method","v2OperationIdCompatibilityMode","normalized","toolboxCreator","visitorOptions","nodeTypeGetter","pojoAdapter","normalizeFn","spec","openApiElement","refract","classes","push","value","cache","set"],"sources":["D:/Vasya/Documents/STUDYING/NSU/4_year/ТехДок/Проект/anakot/node_modules/swagger-client/es/resolver/strategies/openapi-3-1-apidom/normalize.js"],"sourcesContent":["/* eslint-disable camelcase */\nimport { dispatchRefractorPlugins, isObjectElement, toValue } from '@swagger-api/apidom-core';\nimport { refractorPluginNormalizeOperationIds, refractorPluginNormalizeParameters, refractorPluginNormalizeSecurityRequirements, refractorPluginNormalizeParameterExamples, refractorPluginNormalizeHeaderExamples, createToolbox, keyMap, getNodeType, OpenApi3_1Element } from '@swagger-api/apidom-ns-openapi-3-1';\nimport opId from '../../../helpers/op-id.js';\nimport resolveOpenAPI31Strategy from './resolve.js';\nconst normalize = element => {\n  if (!isObjectElement(element)) return element;\n  const plugins = [refractorPluginNormalizeOperationIds({\n    operationIdNormalizer: (operationId, path, method) => opId({\n      operationId\n    }, path, method, {\n      v2OperationIdCompatibilityMode: false\n    })\n  }), refractorPluginNormalizeParameters(), refractorPluginNormalizeSecurityRequirements(), refractorPluginNormalizeParameterExamples(), refractorPluginNormalizeHeaderExamples()];\n  const normalized = dispatchRefractorPlugins(element, plugins, {\n    toolboxCreator: createToolbox,\n    visitorOptions: {\n      keyMap,\n      nodeTypeGetter: getNodeType\n    }\n  });\n  return normalized;\n};\n\n/**\n * This adapter allow to perform normalization on Plain Old JavaScript Objects.\n * The function adapts the `normalize` function interface and is able to accept\n * Plain Old JavaScript Objects and returns Plain Old JavaScript Objects.\n */\nexport const pojoAdapter = normalizeFn => spec => {\n  const openApiElement = OpenApi3_1Element.refract(spec);\n  openApiElement.classes.push('result');\n  const normalized = normalizeFn(openApiElement);\n  const value = toValue(normalized);\n\n  /**\n   * We're setting the cache here to avoid repeated refracting\n   * in `openapi-3-1-apidom` strategy resolve method.\n   */\n  resolveOpenAPI31Strategy.cache.set(value, normalized);\n  return toValue(normalized);\n};\nexport default normalize;\n/* eslint-enable camelcase */"],"mappings":"AAAA;AACA,SAASA,wBAAwB,EAAEC,eAAe,EAAEC,OAAO,QAAQ,0BAA0B;AAC7F,SAASC,oCAAoC,EAAEC,kCAAkC,EAAEC,4CAA4C,EAAEC,yCAAyC,EAAEC,sCAAsC,EAAEC,aAAa,EAAEC,MAAM,EAAEC,WAAW,EAAEC,iBAAiB,QAAQ,oCAAoC;AACrT,OAAOC,IAAI,MAAM,2BAA2B;AAC5C,OAAOC,wBAAwB,MAAM,cAAc;AACnD,MAAMC,SAAS,GAAGC,OAAO,IAAI;EAC3B,IAAI,CAACd,eAAe,CAACc,OAAO,CAAC,EAAE,OAAOA,OAAO;EAC7C,MAAMC,OAAO,GAAG,CAACb,oCAAoC,CAAC;IACpDc,qBAAqB,EAAEA,CAACC,WAAW,EAAEC,IAAI,EAAEC,MAAM,KAAKR,IAAI,CAAC;MACzDM;IACF,CAAC,EAAEC,IAAI,EAAEC,MAAM,EAAE;MACfC,8BAA8B,EAAE;IAClC,CAAC;EACH,CAAC,CAAC,EAAEjB,kCAAkC,CAAC,CAAC,EAAEC,4CAA4C,CAAC,CAAC,EAAEC,yCAAyC,CAAC,CAAC,EAAEC,sCAAsC,CAAC,CAAC,CAAC;EAChL,MAAMe,UAAU,GAAGtB,wBAAwB,CAACe,OAAO,EAAEC,OAAO,EAAE;IAC5DO,cAAc,EAAEf,aAAa;IAC7BgB,cAAc,EAAE;MACdf,MAAM;MACNgB,cAAc,EAAEf;IAClB;EACF,CAAC,CAAC;EACF,OAAOY,UAAU;AACnB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMI,WAAW,GAAGC,WAAW,IAAIC,IAAI,IAAI;EAChD,MAAMC,cAAc,GAAGlB,iBAAiB,CAACmB,OAAO,CAACF,IAAI,CAAC;EACtDC,cAAc,CAACE,OAAO,CAACC,IAAI,CAAC,QAAQ,CAAC;EACrC,MAAMV,UAAU,GAAGK,WAAW,CAACE,cAAc,CAAC;EAC9C,MAAMI,KAAK,GAAG/B,OAAO,CAACoB,UAAU,CAAC;;EAEjC;AACF;AACA;AACA;EACET,wBAAwB,CAACqB,KAAK,CAACC,GAAG,CAACF,KAAK,EAAEX,UAAU,CAAC;EACrD,OAAOpB,OAAO,CAACoB,UAAU,CAAC;AAC5B,CAAC;AACD,eAAeR,SAAS;AACxB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}